#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define LOWER  1
#define RAISE  2
#define ADJUST  3

#define AS(keycode) &as LS(keycode) keycode // Autoshift Macro

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <180>;
};

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&lt {
    tapping-term-ms = <250>;
    quick_tap_ms = <200>;
    flavor = "tap-preferred";
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

/ {

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm: homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hshft: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <199>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    macros {
        mac_dotslash: mac_dotslash {
            label = "mac_dotslash";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp DOT &kp DOT &kp FSLH>;
        };
        mac_obkt: mac_obkt {
            label = "mac_open_brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
        };    
        mac_obrc: mac_obrc {
            label = "mac_open_braces";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>;
        };    
        mac_opar: mac_opar {
            label = "mac_open_parentheses";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_jk_esc {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp ESC>;
        };
        combo_xc_copy {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LC(C)>;
        };
        combo_zc_cut {
            timeout-ms = <50>;
            key-positions = <25 27>;
            bindings = <&kp LC(X)>;
        };
        combo_zx_undo {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LC(Z)>;
        };
        combo_dotslash_dotdotslash {
            timeout-ms = <50>;
            key-positions = <35 36>;
            bindings = <&mac_dotslash>;
        };
        combo_yu_rbkt {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RBKT>;
        };
        combo_hj_rbkc {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RBRC>;
        };
        combo_nm_rpar {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RPAR>;
        };
        combo_rt_rbkt {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LBKT>;
        };
        combo_fg_rbkc {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LBRC>;
        };
        combo_vb_rpar {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LPAR>;
        };
    };


        keymap {
                compatible = "zmk,keymap";

 default_layer {

            bindings = <
&kp LBKT    &kp Q   &kp W   &kp E   &kp R   &kp T                       &kp Y   &kp U   &kp I       &kp O       &kp P       &kp RBKT
&kp ESC     &hm LGUI A   &hm LALT S   &hm LCTRL D   &hshft LSHFT F   &kp G                       &kp H   &hm RSHFT J   &hshft RCTRL K       &hm RALT L       &hm RGUI SEMI    &kp SQT
&sk LGUI    &kp Z   &kp X   &kp C   &kp V   &kp B  &none  &kp K_MUTE    &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &sk LALT
                    &sk LCTRL  &mt LGUI RET  &lt LOWER TAB     &lt RAISE BKSP    &mt LALT SPACE   &sk LSHIFT
            >;
        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;

        };

lower_layer {

            bindings = <
&trans &kp APOS  &kp LT         &kp GT          &kp DQT         &kp KP_DOT                  &kp AMPS    &kp UNDER   &kp LBKT    &kp RBKT    &kp PRCNT   &trans
&trans &kp EXCL  &kp KP_MINUS   &kp KP_PLUS     &kp KP_EQUAL    &kp HASH                    &kp PIPE    &kp COLON   &kp RBKT    &kp BSLH    &kp QMARK   &trans
&trans &kp CARET &kp KP_SLASH   &kp KP_ASTERISK &kp BACKSLASH   &kp GRAVE   &trans &trans   &kp TILDE   &kp DLLR    &kp LBRC    &kp RBRC    &kp AT      &trans
                                &trans          &trans          &trans                      &trans      &trans      &trans
            >;
        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };


raise_layer {

            bindings = <
&trans  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                          &kp N6      &kp N7      &kp N8      &kp N9      &kp N0 &trans
&trans  &mkp MB4    &mkp LCLK   &mkp MCLK   &mkp RCLK   &mkp MB5                        &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp K_APP &trans
&trans  &trans      &kp K_REDO  &kp K_CUT   &kp K_COPY  &kp K_PASTE   &none &kp K_MUTE  &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &trans &trans
                                &trans      &trans      &trans                          &trans      &trans      &trans
            >;
        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        };
};
